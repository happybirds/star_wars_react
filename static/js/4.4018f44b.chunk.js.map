{"version":3,"sources":["hooks/useTypedSelector.ts","components/Starwars/Detail.tsx","components/Starwars/Starwars.tsx","store/actions/getData.ts"],"names":["useTypedSelector","useSelector","Row","row","details","useParams","name","React","useState","open","setOpen","Fragment","TableRow","sx","borderBottom","TableCell","IconButton","size","onClick","component","scope","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","CardContent","map","data","index","Typography","fontSize","color","gutterBottom","replace","s","toUpperCase","Starwars","page","setPage","state","user","isLoading","error","count","url","getUrl","dispatch","useDispatch","useEffect","a","fetchDataAction","axios","get","res","fetchDataSuccessAction","results","fetchErrorAction","getData","Math","ceil","NavigateBefore","NavigateNext","TableContainer","Paper","Table","TableBody"],"mappings":"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","file":"static/js/4.4018f44b.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../store/reducers';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  Box,\n  Collapse,\n  IconButton,\n  TableCell,\n  TableRow,\n  Typography,\n  CardContent,\n} from \"@mui/material\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\n\nexport default function Row(row: any) {\n  const { name }: any = useParams();\n  let details = [\n    \"name\",\n    \"height\",\n    \"mass\",\n    \"hair_color\",\n    \"skin_color\",\n    \"gender\",\n    \"birth_year\",\n  ];\n  switch (name) {\n    case \"movies\":\n      details = [\"title\", \"director\", \"producer\", \"release_date\"];\n      break;\n    case \"planets\":\n      details = [\"name\", \"terrain\", \"population\"];\n      break;\n    default:\n      break;\n  }\n\n  const [open, setOpen] = React.useState(false);\n  return (\n    <React.Fragment>\n      <TableRow sx={{ \"& > *\": { borderBottom: \"unset\" } }}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {row.row[\"name\"] ?? row.row[\"title\"]}\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box sx={{ margin: 1 }}>\n              <CardContent>\n                {details &&\n                  details.map((data, index) => (\n                    <Typography\n                      sx={{ fontSize: 14 }}\n                      color=\"text.secondary\"\n                      gutterBottom\n                      component=\"div\"\n                      key={index}\n                    >\n                      {data\n                        .replace(/[_]/g, \" \")\n                        .replace(/^\\S/, (s) => s.toUpperCase())}\n                      : {row.row[data]}\n                    </Typography>\n                  ))}\n              </CardContent>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { getData } from \"../../store/actions/getData\";\nimport { NavigateBefore, NavigateNext } from \"@mui/icons-material\";\nimport {\n  IconButton,\n  Table,\n  TableBody,\n  TableContainer,\n  Paper,\n} from \"@mui/material\";\nimport Row from \"./Detail\";\n\nconst getUrl = (name: string = \"person\", page: number = 1) => {\n  switch (name) {\n    case \"person\":\n      return `https://swapi.dev/api/people/?page=${page}`;\n    case \"movies\":\n      return `https://swapi.dev/api/films/?page=${page}`;\n    case \"planets\":\n      return `https://swapi.dev/api/planets/?page=${page}`;\n    default:\n      break;\n  }\n};\n\nconst Starwars = () => {\n  const [page, setPage] = useState<number>(1);\n  const { name }: any = useParams();\n  const { data, isLoading, error, count } = useTypedSelector(\n    (state) => state.user\n  );\n\n  const url = getUrl(name, page);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setPage(1);\n  }, [name]);\n\n  useEffect(() => {\n    dispatch(getData(url));\n  }, [url]);\n\n  if (isLoading) {\n    return <h1>Loading...</h1>;\n  }\n  if (error) {\n    return <h1>{error}</h1>;\n  }\n  return (\n    <>\n      {page}/ {Math.ceil(count / 10)}\n      {page !== 1 && (\n        <IconButton\n          aria-label=\"delete\"\n          size=\"medium\"\n          onClick={() => setPage(page - 1)}\n        >\n          <NavigateBefore fontSize=\"inherit\" color=\"primary\" />\n        </IconButton>\n      )}\n      {page < count / 10 && (\n        <IconButton\n          aria-label=\"delete\"\n          size=\"medium\"\n          onClick={() => setPage(page + 1)}\n        >\n          <NavigateNext fontSize=\"inherit\" color=\"primary\" />\n        </IconButton>\n      )}\n      <TableContainer component={Paper}>\n        <Table aria-label=\"collapsible table\">\n          <TableBody>\n            {data.map((user, index) => (\n              <Row key={index} row={user} />\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default Starwars;\n","import axios from 'axios';\nimport { Dispatch } from 'react';\nimport { dataAction } from '../../types';\nimport {\n    fetchErrorAction,\n    fetchDataAction,\n    fetchDataSuccessAction,\n} from '../reducers/dataReducer';\n\n//get data \nexport const getData = (url: string = '') => async (dispatch: Dispatch<dataAction>) => {\n    try {\n        dispatch(fetchDataAction());\n        const res = await axios.get(\n            url\n        );\n        dispatch(fetchDataSuccessAction(res.data.results,res.data.count));\n    } catch (e) {\n        dispatch(fetchErrorAction('Fetch error '));\n    }\n};\n"],"sourceRoot":""}